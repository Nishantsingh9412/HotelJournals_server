{"version":3,"file":"static/js/506.0455d9ee.chunk.js","mappings":"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","sources":["components/User_profile/UploadUserCV.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { IconButton } from '@chakra-ui/react'\r\n// Loader\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\n// React toast \r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n// React bootstrap\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport PrCss from './userProfile.module.css';\r\n// React Icons\r\nimport { FaDownload } from \"react-icons/fa6\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n// Redux\r\nimport { deleteUserCVAction, getUserCVAction, setUserCVAction, updateUserCVAction } from '../../redux/actions/userProfile/userCV';\r\n\r\n\r\n\r\nconst UploadUserCV = () => {\r\n\r\n    const { id } = useParams();\r\n    const [file, setFile] = useState(null);\r\n    const [CVName, setCVName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const serverUrl = process.env.REACT_APP_SERVER_URL_XTRA_SLASH;\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserCVAction(id))\r\n    }, [dispatch, id])\r\n\r\n    const CVUser = useSelector((state) => state.CVsettergetterReducer);\r\n    const singleCV = CVUser?.data?.result?.cv_db;\r\n    console.log(singleCV)\r\n\r\n    const handlesubmitCV = async (e) => {\r\n        e.preventDefault();\r\n        if (!file) {\r\n            return toast.error('Please select a file to upload');\r\n        }\r\n        if (\r\n            file.type !== 'application/pdf' &&\r\n            file.type !== 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' &&\r\n            file.type !== 'application/msword'\r\n        ) {\r\n            return toast.error('File type should be pdf or docx or doc only');\r\n        }\r\n        if (file.size > 2000000) {\r\n            return toast.error('File size should not exceed 2MB');\r\n        }\r\n        setLoading(true);\r\n        console.log(file)\r\n        const formData = new FormData();\r\n        formData.append('cv', file);\r\n        // Sending the form data to the server\r\n        dispatch(setUserCVAction(id, formData)).then((res) => {\r\n            if (res.success) {\r\n                dispatch(getUserCVAction(id)).then((respo2) => {\r\n                    if (respo2.success) {\r\n                        toast.success(res.message);\r\n                    } else {\r\n                        toast.error('Refresh Page to see changes ');\r\n                    }\r\n                });\r\n            }\r\n        }).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    const handleupdateCV = async (e) => {\r\n        e.preventDefault();\r\n        if (!file) {\r\n            return toast.error('Please select a file to upload');\r\n        }\r\n        if (\r\n            file.type !== 'application/pdf' &&\r\n            file.type !== 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' &&\r\n            file.type !== 'application/msword'\r\n        ) {\r\n            return toast.error('File type should be pdf or docx or doc only');\r\n        }\r\n        if (file.size > 2000000) {\r\n            return toast.error('File size should not exceed 2MB');\r\n        }\r\n        setLoading(true);\r\n        console.log(file)\r\n        const formData = new FormData();\r\n        formData.append('cv', file);\r\n        // Sending the form data to the server\r\n        const response = await dispatch(updateUserCVAction(id, formData));\r\n        if (response.success) {\r\n            const respo2 = await dispatch(getUserCVAction(id));\r\n            if (respo2.success) {\r\n                toast.success(response.message);\r\n            } else {\r\n                toast.error('Refresh Page to see changes ');\r\n            }\r\n        } else {\r\n            toast.error(response.message);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const handleDeleteCV = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        dispatch(deleteUserCVAction(id)).then((response) => {\r\n            if (response.success) {\r\n                setCVName('');\r\n                toast.success(response.message);\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n\r\n    // const DownloadCVButton = ({ cvUrl, filename }) => {\r\n    const handleDownloadCV = async (cvUrl, filename) => {\r\n        try {\r\n            const response = await fetch(`${serverUrl}${cvUrl}`);\r\n            const blob = await response.blob();\r\n            const url = window.URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', filename); // or any other extension\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            link.parentNode.removeChild(link);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    // return <FaDownload size={'30'} color='#8E7AB5' onClick={handleDownload} />;\r\n    // };\r\n\r\n\r\n    useEffect(() => {\r\n        if (singleCV) {\r\n            setCVName(singleCV?.split('Z')[1])\r\n        }\r\n    }, [singleCV])\r\n\r\n\r\n\r\n    return (\r\n        <div id='resumescroll' className='mb-4'>\r\n            <ToastContainer />\r\n            {/* <div className={` ${PrCss.addSections}`}>\r\n                <div className=\"card w-100\">\r\n                    <div className=\"card-body text-center\">\r\n                        <i className='fa-solid fa-plus'></i>\r\n                        <p className='card-text'>  CV Or Resume  </p>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {!singleCV ? (<>\r\n                <div className='mt-2'\r\n                    style={{\r\n                        boxShadow: '14px 10px 20px 3px #d3beae',\r\n                        borderRadius: '25px 25px 25px 25px',\r\n                        padding: '2rem'\r\n                    }}\r\n                >\r\n                    <h5>\r\n                        {/* Upload CV */}\r\n                        Subir CV\r\n                    </h5>\r\n                    <form>\r\n                        <input type=\"file\" onChange={e => setFile(e.target.files[0])} />\r\n                        <Button onClick={handlesubmitCV}>\r\n                            {loading ? <>\r\n                                <div className='d-flex'>\r\n                                    <PuffLoader\r\n                                        size={25}\r\n                                        color=\"#ffffff\"\r\n                                    /> <span className='pl-2'> </span>\r\n                                </div>\r\n                            </> :\r\n                                // 'Save'\r\n                                'Guardar'\r\n                            }\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </>) : (\r\n                <>\r\n                    {/* <div className='mt-2' style={}> */}\r\n                    <div class=\"card mt-3 p-4\"\r\n                        style=\r\n                        {{\r\n                            boxShadow: '14px 10px 20px 3px #d3beae',\r\n                            borderRadius: '25px 25px 25px 25px'\r\n                        }}\r\n                    >\r\n                        <form >\r\n                            <div className=\"col-md-6 \">\r\n                                <h5 >\r\n                                    Editar CV\r\n                                </h5>\r\n                            </div>\r\n                            <div className='row mb-4 p-4'>\r\n                                <p>\r\n                                    {/* {singleCV?.split('Z')[1]} */}\r\n                                    {CVName}\r\n                                </p>\r\n                                <div className='col-md-2 d-flex'>\r\n                                    <div\r\n                                        style={{ cursor: 'pointer' }}\r\n                                        onClick={() => {\r\n                                            handleDownloadCV(singleCV, singleCV?.split('Z')[1])\r\n                                        }}\r\n                                    >\r\n\r\n                                        <IconButton\r\n                                        marginLeft={'10px'}\r\n                                        marginRight={'10px'}\r\n                                            aria-label='Download CV'\r\n                                            icon={\r\n                                                <FaDownload\r\n                                                    size={'20'}\r\n                                                    color='#4c9df4' />\r\n                                            }\r\n                                        />\r\n                                        {/* <DownloadCVButton\r\n                                            cvUrl={singleCV}\r\n                                            filename={singleCV?.split('Z')[1]}\r\n                                        /> */}\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ cursor: 'pointer' }}\r\n                                        onClick={handleDeleteCV}\r\n                                    >\r\n                                        <IconButton\r\n                                            // colorScheme='blue'\r\n                                            aria-label='Delete CV'\r\n                                            icon={<MdDelete size={'20'} color='red' />}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <input\r\n                                type=\"file\"\r\n                                onChange={(e) => setFile(e.target.files[0])}\r\n                            />\r\n                            <Button onClick={handleupdateCV}>\r\n                                {loading ? <>\r\n                                    <div className='d-flex '>\r\n                                        <PuffLoader\r\n                                            size={25}\r\n                                            color=\"#ffffff\"\r\n                                        /> <span className='pl-2'> </span>\r\n                                    </div>\r\n                                </> :\r\n                                    // 'Update CV'\r\n                                    'Actualizar CV '\r\n                                }\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </>\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadUserCV\r\n"],"names":["_CVUser$data","_CVUser$data$result","id","useParams","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","CVName","setCVName","_useState5","_useState6","loading","setLoading","dispatch","useDispatch","useEffect","getUserCVAction","CVUser","useSelector","state","CVsettergetterReducer","singleCV","data","result","cv_db","console","log","handlesubmitCV","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","formData","wrap","_context","prev","next","preventDefault","abrupt","toast","error","type","size","FormData","append","setUserCVAction","then","res","success","respo2","message","finally","stop","_x","apply","arguments","handleupdateCV","_ref2","_callee2","response","_context2","updateUserCVAction","sent","_x2","handleDeleteCV","_ref3","_callee3","_context3","deleteUserCVAction","_x3","handleDownloadCV","_ref4","_callee4","cvUrl","filename","blob","url","link","_context4","fetch","concat","process","window","URL","createObjectURL","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","t0","_x4","_x5","split","_jsxs","className","children","_jsx","ToastContainer","_Fragment","class","style","boxShadow","borderRadius","cursor","onClick","IconButton","marginLeft","marginRight","icon","FaDownload","color","MdDelete","onChange","target","files","Button","PuffLoader","padding"],"sourceRoot":""}